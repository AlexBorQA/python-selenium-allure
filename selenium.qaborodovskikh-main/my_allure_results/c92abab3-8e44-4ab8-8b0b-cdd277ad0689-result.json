{"name": "test_link_git", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Всегда довожу все до конца.\nMessage: unexpected alert open: {Alert text : Всегда довожу все до конца.}\n  (Session info: chrome=108.0.5359.98)\nStacktrace:\n0   chromedriver                        0x000000010213cf38 chromedriver + 4910904\n1   chromedriver                        0x00000001020bca03 chromedriver + 4385283\n2   chromedriver                        0x0000000101d01747 chromedriver + 472903\n3   chromedriver                        0x0000000101d870ce chromedriver + 1020110\n4   chromedriver                        0x0000000101d6bee3 chromedriver + 909027\n5   chromedriver                        0x0000000101d3630c chromedriver + 688908\n6   chromedriver                        0x0000000101d3788e chromedriver + 694414\n7   chromedriver                        0x000000010210a1de chromedriver + 4702686\n8   chromedriver                        0x000000010210eb19 chromedriver + 4721433\n9   chromedriver                        0x000000010211628e chromedriver + 4752014\n10  chromedriver                        0x000000010210f91a chromedriver + 4725018\n11  chromedriver                        0x00000001020e3b02 chromedriver + 4545282\n12  chromedriver                        0x000000010212e888 chromedriver + 4851848\n13  chromedriver                        0x000000010212ea05 chromedriver + 4852229\n14  chromedriver                        0x0000000102144e5f chromedriver + 4943455\n15  libsystem_pthread.dylib             0x00007fff72608109 _pthread_start + 148\n16  libsystem_pthread.dylib             0x00007fff72603b8b thread_start + 15", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"39fd0d9d75a1ca9ab7c03ed47f46179e\")>\n\n    def test_link_git(browser):\n        \"\"\"\n        Test case AB-4\n        \"\"\"\n    \n>       browser.get(\"https://qaborodovskikh.ru/\")\n\ntests/test_main.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:455: in get\n    self.execute(Command.GET, {\"url\": url})\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1071d2550>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Всегда довожу все до конца.\"},\"error\":\"unexpected alert open\",\"mes...fff72608109 _pthread_start + 148\\\\n16  libsystem_pthread.dylib             0x00007fff72603b8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Всегда довожу все до конца.\nE           Message: unexpected alert open: {Alert text : Всегда довожу все до конца.}\nE             (Session info: chrome=108.0.5359.98)\nE           Stacktrace:\nE           0   chromedriver                        0x000000010213cf38 chromedriver + 4910904\nE           1   chromedriver                        0x00000001020bca03 chromedriver + 4385283\nE           2   chromedriver                        0x0000000101d01747 chromedriver + 472903\nE           3   chromedriver                        0x0000000101d870ce chromedriver + 1020110\nE           4   chromedriver                        0x0000000101d6bee3 chromedriver + 909027\nE           5   chromedriver                        0x0000000101d3630c chromedriver + 688908\nE           6   chromedriver                        0x0000000101d3788e chromedriver + 694414\nE           7   chromedriver                        0x000000010210a1de chromedriver + 4702686\nE           8   chromedriver                        0x000000010210eb19 chromedriver + 4721433\nE           9   chromedriver                        0x000000010211628e chromedriver + 4752014\nE           10  chromedriver                        0x000000010210f91a chromedriver + 4725018\nE           11  chromedriver                        0x00000001020e3b02 chromedriver + 4545282\nE           12  chromedriver                        0x000000010212e888 chromedriver + 4851848\nE           13  chromedriver                        0x000000010212ea05 chromedriver + 4852229\nE           14  chromedriver                        0x0000000102144e5f chromedriver + 4943455\nE           15  libsystem_pthread.dylib             0x00007fff72608109 _pthread_start + 148\nE           16  libsystem_pthread.dylib             0x00007fff72603b8b thread_start + 15\n\nenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:248: UnexpectedAlertPresentException"}, "description": "\n    Test case AB-4\n    ", "start": 1670765318429, "stop": 1670765318439, "uuid": "ce96c0fd-cfd9-49ed-ab9e-1f9caee92579", "historyId": "68f840313624abc2c4c6d88b9099536b", "testCaseId": "18faa411d832d604f53723a51edc29f3", "fullName": "tests.test_main#test_link_git", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main"}, {"name": "host", "value": "iMac-Alexey.MSHOME"}, {"name": "thread", "value": "1660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main"}]}